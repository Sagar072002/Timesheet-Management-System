const nodemailer = require("nodemailer"); // to send mail from node
const { google } = require("googleapis"); // to get gmail access for sender
const { User } = require("../db"); //to fetch object pf users db 
const bcrypt = require("bcrypt"); //has the values

// These are the id and tokens generated by gmail api 
// The Access to gmail get Expired in 7 days so we have to regerate it manually
const client_id =
  "999945687960-c8cekffue2dekt39mu7tl6rrk6920qkb.apps.googleusercontent.com";
const client_sec = "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";
const redirect_uri = "https://developers.google.com/oauthplayground";
const refresh_token =
  "1//04MvS6OUZFM-XCgYIARAAGAQSNwF-L9Ir7NjQ6UthQFhEd034MxSzI2wxSdpRIaSxfTbK60IWupO6reO1mwTo0IkfRCjHusM4OGQ";
  //to set authentication with gmail
const oauth2Client = new google.auth.OAuth2(
  client_id,
  client_sec,
  redirect_uri
);
//Refresh token is to refresh the access token
//Access token get expired in 60 mins so it can be updated using refresh token
oauth2Client.setCredentials({ refresh_token: refresh_token });

// function for updating reset password in DB
async function reset_pass(req, res) {
  try {
    const { email, password } = req.body;
    var user = await User.findOne({ where: { email } });
    user.password = await bcrypt.hash(password, 10);
    user.reset_link = false;
    await user.save();
    res.status(200).json({ update: true });
  } catch (error) {
    res.status(500).json({ error: error.message, update: "false" });
  }
}
//function to send password reset mail
async function sendmail(req, res) {
  //to set authentication with gmail
  const oauth2Client = new google.auth.OAuth2(
    client_id,
    client_sec,
    redirect_uri
    );
    oauth2Client.setCredentials({ refresh_token: refresh_token });
    try {
    const { email } = req.body;
    var user = await User.findOne({ where: { email } }).catch(e=>console.log(e));
    //mail entered in forgot password must be the same mail which is given at registration
    if(user==null){
        message="User does not exsist"
        return res.status(500).json({message });
    }
    else
    {
    if (user.reset_link) {
      user.reset_link = false;
      await user.save();
    }
    user.reset_link = true;
    await user.save();
  
    user = await User.findOne({ where: { email } }).catch(e=>console.log(e));
    const duration = user.updatedAt;
    const key = user.password;
    const access_token = await oauth2Client.getAccessToken();
    //funtion which send mail to user
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        type: "oAuth2",
        user: "msecsecondyearit@gmail.com",
        clientId: client_id, // Your API key
        clientSecret: client_sec,
        accesstoken: access_token,
        refreshToken: refresh_token,
      },
    });
    //reset mail link contails his email,key,expiry duration
    //email will be the senders mail 
    //key will be the hashed (old)password
    //expiry will be the time and date value at which mail link gets expired (10 min form mail generation)
    //the verification will be done in  verifymail function
    const mailopt = {
      from: "msecsecondyearit@gmail.com",
      to: `${email}`,
      subject: "Test mail Gmail",
      text: "Example mail sending testing",
      html: `<a href="http://localhost:3001/forgotpass/?mail=${email}&key=${key}&expiry=${duration}">ClickHere</a>`,
    };

    const info = await transporter.sendMail(mailopt);
    return res.status(200).json({ response: info });}
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
}
//function to send bulk mail to user (Used for sending reminder mail to all user and deadline passed mail to some users)
async function sendbulkmail(g,sub,msg,html) {
  //to set authentication with gmail
  const oauth2Client = new google.auth.OAuth2(
    client_id,
    client_sec,
    redirect_uri
    );
    oauth2Client.setCredentials({ refresh_token: refresh_token });
    try { 
    const access_token = await oauth2Client.getAccessToken();
    //function to create mail template 
    //g is array of recievers
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        type: "oAuth2",
        user: "msecsecondyearit@gmail.com",
        clientId: client_id, // Your API key
        clientSecret: client_sec,
        accesstoken: access_token,
        refreshToken: refresh_token,
      },
    });
    const mailopt = {
      from: "msecsecondyearit@gmail.com",
      to: g,
      subject: sub,
      text: msg,
      html:html,
    };

    const info = await transporter.sendMail(mailopt);

  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
}
// function to verify the reset link
async function verifymail(req, res) {
  try {
    const { email, key } = req.body;
    //finding user's mail,password in database 
    const user = await User.findOne({ where: { email } });
    //validate bsed on hased password values
    if (!user || !(key === user.password)) {
      return res.status(401).json({ error: "Invalid Link" });
    }

    res.status(200).json({ email: user.email, auth: true ,temp:user.twofa});
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}

module.exports = { sendmail, verifymail, reset_pass, sendbulkmail };




